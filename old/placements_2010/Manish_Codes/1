#include<iostream>
#include<vector>
#include<queue>
using namespace std;

vector< vector<int> > Maximum_Edge(vector< vector<int> > graph, int n)
{
	vector< vector<int> > max(n,vector<int>(n,0));
	queue<int> Queue;
	int u = 0;
	Queue.push(u);
	while(Queue.size() > 0)
	{
		int x = Queue.front();
		Queue.pop();
		for(int j=0;j<n;j++)
		{
			if(graph[x][j] != 0)
			{
				graph[j][x] = 0;
				if(max[x][j] == 0 && j != u)
				{
					if(x == u && graph[x][j] > max[u][x])
						max[u][j] = graph[x][j];
					else
						max[u][j] = max[u][x];
				}
				Queue.push(j);
			}
		}
	}
	return max;
}

int main(void)
{
	int n;
	cin >> n;
	vector< vector<int> > graph(n,vector<int>(n,0));
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			cin >> graph[i][j];
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			if(graph[i][j] != 0)
				graph[j][i] = graph[i][j];
	vector< vector<int> > max(n,vector<int>(n,0));
	max = Maximum_Edge(graph,n);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
			cout << max[i][j] << " ";
		cout << endl;
	}
}
